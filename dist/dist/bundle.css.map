{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Input.svelte",
    "../diagram.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import { round } from \"./helpers\";\n  import {\n    initializeSavings,\n    getAllCurrency,\n    updateAccount,\n    createAccount,\n    deleteAccount,\n    rates,\n    status,\n    error,\n    finance,\n    STATUS,\n    totalSaving,\n    savingsHistory,\n  } from \"./store\";\n  import Input from \"./Input.svelte\";\n  import Diagram from \"./components/diagram.svelte\";\n  import { data } from \"./data\";\n\n  onMount(() => {\n    initializeSavings();\n    getAllCurrency();\n  });\n\n  function handleChange({ detail }) {\n    console.log(detail);\n    updateAccount(detail);\n  }\n\n  function handleDelete({ detail }) {\n    deleteAccount(detail);\n  }\n\n  function add(e) {\n    e.preventDefault();\n    createAccount();\n  }\n\n  $: financeKeys = $finance ? Object.keys($finance) : [];\n\n  const product = {\n    banans: data.columns[1],\n  };\n</script>\n\n<style lang=\"css\">\n  .app {\n    padding: 2rem;\n  }\n  .results {\n    margin: 1rem 0;\n  }\n</style>\n\n<div class=\"app\">\n  {#if $status === STATUS.loading}Загрузка{/if}\n  {#if $status === STATUS.failed}{$error}{/if}\n  {#if $status === STATUS.loaded}\n    Доллар:\n    {$rates['USD']}\n    Евро:{$rates['EUR']}\n  {/if}\n  <div class=\"statixstick\">\n    <form>\n      {#each financeKeys as key}\n        <Input\n          id={key}\n          name={$finance[key].name}\n          amount={$finance[key].amount}\n          currency={$finance[key].currency}\n          on:message={handleChange}\n          on:delete={handleDelete} />\n      {/each}\n      <button on:click={add}>Добавить</button>\n    </form>\n    <div>\n      {#each $savingsHistory as item}{item.USD}{/each}\n    </div>\n  </div>\n\n  <div class=\"results\">\n    <div>Общая сумма в рублях: {round($totalSaving['RUB'])}</div>\n    <div>Общая сумма в долларах: {round($totalSaving['USD'])}</div>\n    <div>Общая сумма в евро: {round($totalSaving['EUR'])}</div>\n  </div>\n\n  <!-- <Diagram xData={data.columns[0]} yData={data.columns[1]} colors={data.colors} title=\"Chart 3\" /> -->\n</div>\n",
    "<script>\n  import { createEventDispatcher, tick } from \"svelte\";\n\n  export let name;\n  export let amount;\n  export let currency;\n  export let id = \"\";\n\n  let inputRef = null;\n\n  const dispatch = createEventDispatcher();\n\n  $: isInputNameVisible = !name;\n  $: accountName = name || \"\";\n  $: amountValue = amount || \"\";\n  $: currencyValue = currency || \"USD\";\n\n  $: {\n    if (accountName && amountValue && currencyValue) {\n      dispatch(\"message\", {\n        id: id,\n        name: accountName,\n        amount: amountValue,\n        currency: currencyValue\n      });\n    }\n  }\n\n  function handleDelete(e) {\n    e.preventDefault();\n    dispatch(\"delete\", id);\n  }\n\n  async function handleClickOnName() {\n    isInputNameVisible = !isInputNameVisible;\n    await tick();\n    inputRef.focus();\n  }\n</script>\n\n<style>\n  .container {\n    display: flex;\n    align-items: center;\n    /* flex-direction: column; */\n  }\n  .field {\n    margin: 0.5rem 0.5rem 0.5rem 0;\n  }\n\n  .accountName {\n    margin-right: 4px;\n  }\n</style>\n\n<div class=\"container\">\n\n  {#if isInputNameVisible}\n    <div class=\"field\">\n      <input\n        bind:this={inputRef}\n        type=\"text\"\n        placeholder=\"название\"\n        bind:value={accountName}\n        on:blur={() => (isInputNameVisible = !isInputNameVisible)}\n        name=\"accountName\" />\n    </div>\n  {:else}\n    <div class=\"accountName\" on:click={handleClickOnName}>{accountName || ''}</div>\n  {/if}\n  <div class=\"field\">\n    <input\n      type=\"number\"\n      placeholder=\"cумма\"\n      name={`${id}Amount`}\n      bind:value={amountValue} />\n    <select name={`${id}Currency`} bind:value={currencyValue}>\n      <option value=\"USD\">Доллар</option>\n      <option value=\"EUR\">Евро</option>\n      <option value=\"RUB\">Рубли</option>\n    </select>\n  </div>\n  <button on:click={handleDelete}>Удалить</button>\n</div>\n",
    "<script>\n  import { onMount, afterUpdate } from \"svelte\";\n  import { data } from \"../data.js\";\n  import { ratio } from \"../stats.js\";\n  import formateDate from \"../utils/formateDate.js\";\n  import { round} from '../helpers';\n\n  let canvasRef;\n  let chartRef;\n\n  let ctx;\n\n  export let xData;\n  export let yData;\n  export let colors;\n\n  let widthColumn = 50;\n  let tooltip;\n  let limit = 0;\n  let currentPositionX = 0;\n  let initialPositionX = 0;\n  let isMouseDown = false;\n  let positionXMap = 0;\n  let offset = 0;\n  let previousIndex;\n  let currentColumn;\n  let rightBorderMap;\n  let leftBorderMap;\n  let dpi = window.devicePixelRatio;\n\n  const widthCanvas = xData.length * widthColumn;\n  const dataArray = xData.map((val, i) => i * widthColumn);\n  const dataKeys = Object.keys(yData);\n\n  $: columns = xData.map((val, i) => i * widthColumn + currentPositionX);\n\n  let endDay;\n  let startDay;\n\n  $: {\n    startDay = Math.round(-currentPositionX / widthColumn);\n    endDay = startDay + Math.round(1000 / widthColumn);\n  }\n\n  onMount(() => {\n    if (canvasRef.getContext) {\n      ctx = canvasRef.getContext(\"2d\");\n      draw(ctx);\n    }\n  });\n\n  afterUpdate(() => {\n    offset = chartRef.offsetLeft;\n  });\n\n  const draw = () => {\n    drawRectangle(ctx, 5);\n    drawAxis(ctx);\n    drawTextX(ctx);\n    drawTextY(ctx);\n  };\n\n  const drawRectangle = (ctx, h) => {\n    const width = h === 5 ? widthColumn : 1000 / xData.length;\n    const devider = (Math.max(...yData) + 50) / 100;\n\n    for (let i = 0; i < xData.length; i++) {\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(i * width + width, h * 100 - (yData[i] * h) / devider);\n      ctx.lineTo(\n        (i + 1) * width + width,\n        h * 100 - (yData[i + 1] * h) / devider\n      );\n      ctx.strokeStyle = colors[0];\n      ctx.stroke();\n    }\n  };\n\n  const drawAxis = (ctx) => {\n    for (let i = 0; i < 5; i++) {\n      ctx.fillStyle = \"#eee\";\n      ctx.lineWidth = 0.2;\n      ctx.beginPath();\n      ctx.moveTo(widthColumn, 92 * i);\n      ctx.lineTo(widthCanvas * 3, 92 * i);\n      ctx.strokeStyle = \"#000\";\n      ctx.stroke();\n    }\n  };\n\n  const drawTextX = (ctx) => {\n    ctx.fillStyle = \"#a6a6a6\";\n    for (let i = 0; i < xData.length; i++) {\n      if (i % 5 === 0) {\n        const date = formateDate(xData[i], \"short\");\n        ctx.font = \"14px Roboto\";\n        ctx.fillText(date, widthColumn * (i + 1), 480);\n      }\n    }\n  };\n\n  const drawTextY = (ctx, y = 15) => {\n    const devider = (Math.max(...yData) + 50) / 100;\n\n    ctx.fillStyle = \"#737373\";\n    for (let i = 0; i < 5; i++) {\n      ctx.font = \"14px Roboto\";\n      ctx.fillText(round(100 * devider - i * 20 * devider, true), y, i * 92 - 5);\n    }\n  };\n\n  const drawLine = (index) => {\n    ctx.beginPath();\n    ctx.moveTo(index * widthColumn + widthColumn, 0);\n    ctx.lineTo(index * widthColumn + widthColumn, 504);\n    ctx.lineWidth = 0.3;\n    ctx.strokeStyle = \"#000\";\n    ctx.stroke();\n  };\n\n  const drawPoint = (index) => {\n    const devider = (Math.max(...yData) + 50) / 100;\n\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(\n      index * widthColumn + widthColumn,\n      500 - (yData[index] / devider) * 5,\n      5,\n      0,\n      Math.PI * 2\n    );\n    ctx.strokeStyle = \"#C9AF4F\";\n    ctx.stroke();\n  };\n\n  const getLimitBorder = (x) => {\n    if (!currentColumn || !isMouseDown) {\n      currentColumn = findColumnIndex(x);\n    }\n    limit = currentColumn * widthColumn + widthColumn + currentPositionX;\n  };\n\n  const findColumnIndex = (x, dataArray = columns) => {\n    const position = x - offset;\n    return dataArray.findIndex(\n      (column, i) => column <= position && position <= dataArray[i + 1]\n    );\n  };\n\n  const checkTooltipBorders = (x) => {\n    let rightX = x - offset;\n\n    if (rightX < 100) {\n      rightX = 100;\n    }\n    if (rightX > 940) {\n      rightX = 940;\n    }\n\n    return rightX;\n  };\n\n  const updateDataTooltip = (e) => {\n    const index = findColumnIndex(e.clientX);\n    const dateColumn = formateDate(xData[index], \"long\");\n\n    tooltip = {\n      ...tooltip,\n      date: dateColumn,\n      views: [yData[index]],\n    };\n  };\n\n  const updatePositionTooltip = (e) => {\n    tooltip = {\n      ...tooltip,\n      x: checkTooltipBorders(e.clientX),\n      y: e.clientY,\n    };\n  };\n\n  const renderTooltip = (e) => {\n    if (!chartRef.contains(e.target)) {\n      tooltip = null;\n      return;\n    }\n    updateDataTooltip(e);\n    updatePositionTooltip(e);\n  };\n\n  const checkChartBorders = (x, translate, widthChart) => {\n    let position = translate;\n\n    const currentWidth = xData.length * widthColumn - 1000;\n\n    if (translate >= currentWidth) {\n      return -currentWidth + 10;\n    }\n    if (translate <= 0) {\n      position = 0;\n    } else {\n      position = -translate;\n    }\n\n    return position;\n  };\n\n  const drawCurrenValue = (e) => {\n    const index = findColumnIndex(e.clientX);\n\n    if (previousIndex === index) {\n      return;\n    }\n    previousIndex = index;\n\n    ctx.clearRect(0, 0, widthCanvas * 3, 504);\n    draw(ctx);\n    drawPoint(index);\n    drawLine(index);\n  };\n\n  const handleMouseMove = (e) => {\n    if (isMouseDown) {\n      const translate = -1 * (e.clientX - initialPositionX);\n\n      currentPositionX = checkChartBorders(\n        e.clientX,\n        translate,\n        widthCanvas - 1000\n      );\n\n      positionXMap = currentPositionX / $ratio;\n      leftBorderMap = -currentPositionX / $ratio;\n      rightBorderMap = (-currentPositionX + 1000) / $ratio;\n\n      updatePositionTooltip(e);\n    } else {\n      renderTooltip(e);\n    }\n    drawCurrenValue(e);\n    getLimitBorder(e.clientX);\n  };\n\n  const handleMouseDown = (e) => {\n    initialPositionX = e.pageX + -1 * currentPositionX;\n    isMouseDown = true;\n  };\n\n  const handleMouseLeave = () => {\n    isMouseDown = false;\n    tooltip = null;\n  };\n\n  const handleMouseEnter = (e) => {\n    renderTooltip(e);\n  };\n</script>\n\n<style>\n  .chart-two {\n    margin: 48px auto;\n  }\n  .chart {\n    position: relative;\n    height: 505px;\n    width: 1000px;\n    overflow: hidden;\n  }\n  .tooltip {\n    position: absolute;\n    padding: 8px 12px;\n    box-shadow: 1px 1px 4px 0px rgba(0, 0, 0, 0);\n    border-radius: 10px;\n  }\n\n  .tooltip--light {\n    background: #fff;\n    border: 1px solid rgb(238, 227, 227);\n    color: #000;\n  }\n  .date {\n    line-height: 1.5em;\n    font-weight: 600;\n  }\n  .views {\n    font-weight: 600;\n    color: #64aded;\n  }\n  canvas {\n    position: relative;\n    transform: scale(0.7);\n  }\n</style>\n\n<div class=\"chart-two\">\n  <div\n    class=\"chart\"\n    bind:this={chartRef}\n    on:mousemove={handleMouseMove}\n    on:mousedown={handleMouseDown}\n    on:mouseleave={handleMouseLeave}\n    on:mouseup={() => (isMouseDown = false)}\n    style={isMouseDown ? 'cursor: grabbing' : 'cursor: grab'}>\n    <canvas\n      bind:this={canvasRef}\n      on:mouseover={handleMouseEnter}\n      class=\"cnvs\"\n      width={widthCanvas}\n      height=\"504px\"\n      style=\"transform: translateX({currentPositionX}px);\" />\n\n    {#if tooltip}\n      <div\n        class=\"tooltip tooltip--light\"\n        style=\"top: 10px; left: {tooltip.x - 65}px\">\n        <p class=\"date\">{tooltip.date}</p>\n        <section class=\"info\">\n          {#each tooltip.views as views, i}\n            <div class=\"views\" style=\"color: {colors[i]}\">\n              {Object.keys(yData)[i]}:\n              <span>{views}</span>\n            </div>\n          {/each}\n        </section>\n      </div>\n    {/if}\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAgDE,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CAAC,CAAC,AAChB,CAAC;ACZD,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AAErB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,AAChC,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,YAAY,CAAE,GAAG,AACnB,CAAC;ACiND,UAAU,cAAC,CAAC,AACV,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,MAAM,CACb,QAAQ,CAAE,MAAM,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5C,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,KAAK,CAAE,IAAI,AACb,CAAC,AACD,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,KAAK,CAClB,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,MAAM,GAAG,CAAC,AACvB,CAAC"
}