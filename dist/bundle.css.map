{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Input.svelte",
    "button.svelte",
    "diagram.svelte",
    "money.svelte",
    "pieChart.svelte",
    "savingHistory.svelte",
    "savingHistoryItem.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onMount } from \"svelte\";\nimport { initializeSavings, getAllCurrency, updateAccount, createAccount, deleteAccount, rates, date, status, error, finance, STATUS, totalSaving, totalRatio, separateCurrencyTotal, } from \"./store\";\nimport PieChart from \"./components/pieChart.svelte\";\nimport Input from \"./Input.svelte\";\nimport Button from \"./components/button.svelte\";\nimport SavingHistory from \"./components/savingHistory/savingHistory.svelte\";\nimport Money from \"./components/money.svelte\";\n;\nlet slices = [];\nonMount(() => {\n    initializeSavings();\n    getAllCurrency();\n});\nfunction handleChange({ detail }) {\n    updateAccount(detail);\n}\nfunction handleDelete({ detail }) {\n    deleteAccount(detail);\n}\nfunction add(e) {\n    e.preventDefault();\n    createAccount();\n}\n$: financeKeys = $finance ? Object.keys($finance) : [];\n$: {\n    slices = [\n        {\n            color: \"#eee\",\n            value: $totalRatio.RUB || 1,\n            text: \"RUB\",\n        },\n        {\n            color: \"#0a7734\",\n            value: $totalRatio.EUR || 1,\n            text: \"EUR\",\n        },\n        {\n            color: \"#d10d17\",\n            value: $totalRatio.USD || 1,\n            text: \"USD\",\n        },\n    ];\n}\n//# sourceMappingURL=App.svelte.js.map</script>\n\n<style lang=\"css\">\n  .app {\n    max-width: 1100px;\n    margin: 0 auto;\n    padding: 2rem;\n  }\n  .results {\n    margin: 1rem 0;\n  }\n  .stats {\n    display: flex;\n    justify-content: space-between;\n  }\n  .sum {\n    font-size: 1.2rem;\n    margin: 0.5rem 0;\n  }\n  .currentRates {\n    margin: 1rem 0 2rem 0;\n  }\n  .results {\n    display: flex;\n    align-items: center;\n  }\n</style>\n\n<div class=\"app\">\n  {#if $status === STATUS.loading}Загрузка{/if}\n  {#if $status === STATUS.failed}{$error}{/if}\n  {#if $status === STATUS.loaded}\n    <div class=\"currentRates\">\n      Доллар:\n      <Money amount={$rates.USD} currency=\"USD\" />\n      Евро:\n      <Money amount={$rates.EUR} currency=\"EUR\" />\n      ({$date})\n    </div>\n  {/if}\n  <div class=\"stats\">\n    <form class=\"form\">\n      {#each financeKeys as key}\n        <Input\n          id={key}\n          name={$finance[key].name}\n          amount={$finance[key].amount}\n          currency={$finance[key].currency}\n          on:message={handleChange}\n          on:delete={handleDelete} />\n      {/each}\n      <Button on:click={add}>Добавить</Button>\n    </form>\n    <SavingHistory />\n  </div>\n\n  <div>\n    <div class=\"results\">\n      <div class=\"sum\">\n        <Money amount={$totalSaving.RUB} currency=\"RUB\" />,\n      </div>\n      <div class=\"sum\">\n        <Money amount={$totalSaving.USD} currency=\"USD\" />,\n      </div>\n      <div class=\"sum\">\n        <Money amount={$totalSaving.EUR} currency=\"EUR\" />,\n      </div>\n    </div>\n    <div class=\"ratioCurrency\">\n      <div class=\"results\">\n        <div class=\"sum\">\n          <Money\n            amount={$separateCurrencyTotal.RUB}\n            currency=\"RUB\" />({$totalRatio.RUB}%),\n        </div>\n        <div class=\"sum\">\n          <Money\n            amount={$separateCurrencyTotal.USD}\n            currency=\"USD\" />({$totalRatio.USD}%),\n        </div>\n        <div class=\"sum\">\n          <Money\n            amount={$separateCurrencyTotal.EUR}\n            currency=\"EUR\" />({$totalRatio.EUR}%)\n        </div>\n      </div>\n      <PieChart {slices} />\n    </div>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher, tick } from \"svelte\";\nimport Button from \"./components/button.svelte\";\n;\nexport let name;\nexport let amount;\nexport let currency;\nexport let id = \"\";\nlet inputRef = null;\nconst dispatch = createEventDispatcher();\n$: isInputNameVisible = !name;\n$: accountName = name || \"\";\n$: amountValue = amount || \"\";\n$: currencyValue = currency || \"USD\";\n$: {\n    if (accountName && amountValue && currencyValue) {\n        dispatch(\"message\", {\n            id: id,\n            name: accountName,\n            amount: amountValue,\n            currency: currencyValue,\n        });\n    }\n}\nfunction handleDelete(e) {\n    e.preventDefault();\n    dispatch(\"delete\", id);\n}\nasync function handleClickOnName() {\n    isInputNameVisible = !isInputNameVisible;\n    await tick();\n    inputRef.focus();\n}\nfunction handleBlur() {\n    if (!accountName) {\n        return;\n    }\n    isInputNameVisible = !isInputNameVisible;\n}\n//# sourceMappingURL=Input.svelte.js.map</script>\n\n<style>\n  .container {\n    display: flex;\n    align-items: center;\n    padding: 0.25rem 1.4rem;\n    margin-bottom: 1rem;\n    background: rgba(0, 0, 0, 0.1);\n    border-radius: 0.25rem;\n  }\n  .field {\n    display: flex;\n    margin: 0.5rem 0.5rem 0.5rem 0;\n  }\n\n  .accountName {\n    min-width: 210px;\n    margin: 0 0.5rem 0 0.5rem;\n  }\n\n  .input {\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n    min-height: 38px;\n    width: 100%;\n    padding: 10px 12px;\n    box-sizing: border-box;\n\n    font-size: 14px;\n    line-height: 1.38;\n\n    background-color: white;\n\n    outline: none;\n    border-radius: 4px;\n    border: 1px solid #eee;\n    color: black;\n  }\n\n  .select {\n    margin-left: 8px;\n    padding: 0 12px;\n    border-radius: 4px;\n    border: 1px solid #eee;\n  }\n</style>\n\n<div class=\"container\">\n  {#if isInputNameVisible}\n    <div class=\"field\">\n      <input\n        class=\"input accountName\"\n        bind:this={inputRef}\n        type=\"text\"\n        placeholder=\"Название\"\n        bind:value={accountName}\n        on:blur={handleBlur}\n        name=\"accountName\" />\n    </div>\n  {:else}\n    <div class=\"accountName\" on:click={handleClickOnName}>\n      {accountName || ''}\n    </div>\n  {/if}\n  <div class=\"field\">\n    <input\n      class=\"input\"\n      type=\"number\"\n      placeholder=\"Сумма\"\n      name={`${id}Amount`}\n      bind:value={amountValue} />\n    <select class=\"select\" name={`${id}Currency`} bind:value={currencyValue}>\n      <option value=\"USD\">Доллар</option>\n      <option value=\"EUR\">Евро</option>\n      <option value=\"RUB\">Рубли</option>\n    </select>\n  </div>\n  <Button on:click={handleDelete}>Удалить</Button>\n</div>\n",
    "<style>\n  .button {\n    display: inline-block;\n    max-width: 124px;\n    padding: 12px 12px;\n\n    outline: none;\n    box-shadow: none;\n    cursor: pointer;\n    text-decoration: none;\n    text-align: center;\n\n    font-size: 16px;\n    border-radius: 4px;\n    line-height: 1.125;\n\n    color: #fff;\n    background-color: #424c57;\n    border: 1px solid#424c57;\n\n    transition: border-color 0.1s ease 0s, background-color 0.1s ease 0s,\n      color 0.1s ease 0s;\n  }\n\n  .button:hover {\n    background-color: #53606e;\n    border-color: #53606e;\n  }\n</style>\n\n<button class=\"button\" on:click><slot /></button>\n",
    "<script>\n  import { onMount, afterUpdate } from \"svelte\";\n  import { data } from \"../data.js\";\n  import formateDate from \"../utils/formateDate.js\";\n  import { round} from '../helpers';\n\n  let canvasRef;\n  let chartRef;\n  let ratio = 0;\n\n  let ctx;\n\n  export let xData;\n  export let yData;\n  export let colors;\n\n  let widthColumn = 50;\n  let tooltip;\n  let limit = 0;\n  let currentPositionX = 0;\n  let initialPositionX = 0;\n  let isMouseDown = false;\n  let positionXMap = 0;\n  let offset = 0;\n  let previousIndex;\n  let currentColumn;\n  let rightBorderMap;\n  let leftBorderMap;\n\n  const widthCanvas = xData.length * widthColumn;\n  const dataArray = xData.map((val, i) => i * widthColumn);\n  const dataKeys = Object.keys(yData);\n\n  $: columns = xData.map((val, i) => i * widthColumn + currentPositionX);\n\n  let endDay;\n  let startDay;\n\n  $: {\n    startDay = Math.round(-currentPositionX / widthColumn);\n    endDay = startDay + Math.round(1000 / widthColumn);\n  }\n\n  onMount(() => {\n    if (canvasRef.getContext) {\n      ctx = canvasRef.getContext(\"2d\");\n      draw(ctx);\n    }\n  });\n\n  afterUpdate(() => {\n    offset = chartRef.offsetLeft;\n  });\n\n  const draw = () => {\n    drawRectangle(ctx, 5);\n    drawAxis(ctx);\n    drawTextX(ctx);\n    drawTextY(ctx);\n  };\n\n  const drawRectangle = (ctx, h) => {\n    const width = h === 5 ? widthColumn : 1000 / xData.length;\n    const devider = (Math.max(...yData) + 50) / 100;\n\n    for (let i = 0; i < xData.length; i++) {\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(i * width + width, h * 100 - (yData[i] * h) / devider);\n      ctx.lineTo(\n        (i + 1) * width + width,\n        h * 100 - (yData[i + 1] * h) / devider\n      );\n      ctx.strokeStyle = colors[0];\n      ctx.stroke();\n    }\n  };\n\n  const drawAxis = (ctx) => {\n    for (let i = 0; i < 5; i++) {\n      ctx.fillStyle = \"#eee\";\n      ctx.lineWidth = 0.2;\n      ctx.beginPath();\n      ctx.moveTo(widthColumn, 92 * i);\n      ctx.lineTo(widthCanvas * 3, 92 * i);\n      ctx.strokeStyle = \"#000\";\n      ctx.stroke();\n    }\n  };\n\n  const drawTextX = (ctx) => {\n    ctx.fillStyle = \"#a6a6a6\";\n    for (let i = 0; i < xData.length; i++) {\n      if (i % 5 === 0) {\n        const date = formateDate(xData[i], \"short\");\n        ctx.font = \"14px Roboto\";\n        ctx.fillText(date, widthColumn * (i + 1), 480);\n      }\n    }\n  };\n\n  const drawTextY = (ctx, y = 15) => {\n    const devider = (Math.max(...yData) + 50) / 100;\n\n    ctx.fillStyle = \"#737373\";\n    for (let i = 0; i < 5; i++) {\n      ctx.font = \"14px Roboto\";\n      ctx.fillText(round(100 * devider - i * 20 * devider, true), y, i * 92 - 5);\n    }\n  };\n\n  const drawLine = (index) => {\n    ctx.beginPath();\n    ctx.moveTo(index * widthColumn + widthColumn, 0);\n    ctx.lineTo(index * widthColumn + widthColumn, 504);\n    ctx.lineWidth = 0.3;\n    ctx.strokeStyle = \"#000\";\n    ctx.stroke();\n  };\n\n  const drawPoint = (index) => {\n    const devider = (Math.max(...yData) + 50) / 100;\n\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(\n      index * widthColumn + widthColumn,\n      500 - (yData[index] / devider) * 5,\n      5,\n      0,\n      Math.PI * 2\n    );\n    ctx.strokeStyle = \"#C9AF4F\";\n    ctx.stroke();\n  };\n\n  const getLimitBorder = (x) => {\n    if (!currentColumn || !isMouseDown) {\n      currentColumn = findColumnIndex(x);\n    }\n    limit = currentColumn * widthColumn + widthColumn + currentPositionX;\n  };\n\n  const findColumnIndex = (x, dataArray = columns) => {\n    const position = x - offset;\n    return dataArray.findIndex(\n      (column, i) => column <= position && position <= dataArray[i + 1]\n    );\n  };\n\n  const checkTooltipBorders = (x) => {\n    let rightX = x - offset;\n\n    if (rightX < 100) {\n      rightX = 100;\n    }\n    if (rightX > 940) {\n      rightX = 940;\n    }\n\n    return rightX;\n  };\n\n  const updateDataTooltip = (e) => {\n    const index = findColumnIndex(e.clientX);\n    const dateColumn = formateDate(xData[index], \"long\");\n\n    tooltip = {\n      ...tooltip,\n      date: dateColumn,\n      views: [yData[index]],\n    };\n  };\n\n  const updatePositionTooltip = (e) => {\n    tooltip = {\n      ...tooltip,\n      x: checkTooltipBorders(e.clientX),\n      y: e.clientY,\n    };\n  };\n\n  const renderTooltip = (e) => {\n    if (!chartRef.contains(e.target)) {\n      tooltip = null;\n      return;\n    }\n    updateDataTooltip(e);\n    updatePositionTooltip(e);\n  };\n\n  const checkChartBorders = (x, translate, widthChart) => {\n    let position = translate;\n\n    const currentWidth = xData.length * widthColumn - 1000;\n\n    if (translate >= currentWidth) {\n      return -currentWidth + 10;\n    }\n    if (translate <= 0) {\n      position = 0;\n    } else {\n      position = -translate;\n    }\n\n    return position;\n  };\n\n  const drawCurrenValue = (e) => {\n    const index = findColumnIndex(e.clientX);\n\n    if (previousIndex === index) {\n      return;\n    }\n    previousIndex = index;\n\n    ctx.clearRect(0, 0, widthCanvas * 3, 504);\n    draw(ctx);\n    drawPoint(index);\n    drawLine(index);\n  };\n\n  const handleMouseMove = (e) => {\n    if (isMouseDown) {\n      const translate = -1 * (e.clientX - initialPositionX);\n\n      currentPositionX = checkChartBorders(\n        e.clientX,\n        translate,\n        widthCanvas - 1000\n      );\n\n      positionXMap = currentPositionX / ratio;\n      leftBorderMap = -currentPositionX / ratio;\n      rightBorderMap = (-currentPositionX + 1000) / ratio;\n\n      updatePositionTooltip(e);\n    } else {\n      renderTooltip(e);\n    }\n    drawCurrenValue(e);\n    getLimitBorder(e.clientX);\n  };\n\n  const handleMouseDown = (e) => {\n    initialPositionX = e.pageX + -1 * currentPositionX;\n    isMouseDown = true;\n  };\n\n  const handleMouseLeave = () => {\n    isMouseDown = false;\n    tooltip = null;\n  };\n\n  const handleMouseEnter = (e) => {\n    renderTooltip(e);\n  };\n</script>\n\n<style>\n  .chart-two {\n    margin: 48px auto;\n  }\n  .chart {\n    position: relative;\n    height: 505px;\n    width: 1000px;\n    overflow: hidden;\n  }\n  .tooltip {\n    position: absolute;\n    padding: 8px 12px;\n    box-shadow: 1px 1px 4px 0px rgba(0, 0, 0, 0);\n    border-radius: 10px;\n  }\n\n  .tooltip--light {\n    background: #fff;\n    border: 1px solid rgb(238, 227, 227);\n    color: #000;\n  }\n  .date {\n    line-height: 1.5em;\n    font-weight: 600;\n  }\n  .views {\n    font-weight: 600;\n    color: #64aded;\n  }\n  canvas {\n    position: relative;\n    transform: scale(0.7);\n  }\n</style>\n\n<div class=\"chart-two\">\n  <div\n    class=\"chart\"\n    bind:this={chartRef}\n    on:mousemove={handleMouseMove}\n    on:mousedown={handleMouseDown}\n    on:mouseleave={handleMouseLeave}\n    on:mouseup={() => (isMouseDown = false)}\n    style={isMouseDown ? 'cursor: grabbing' : 'cursor: grab'}>\n    <canvas\n      bind:this={canvasRef}\n      on:mouseover={handleMouseEnter}\n      class=\"cnvs\"\n      width={widthCanvas}\n      height=\"504px\"\n      style=\"transform: translateX({currentPositionX}px);\" />\n\n    {#if tooltip}\n      <div\n        class=\"tooltip tooltip--light\"\n        style=\"top: 10px; left: {tooltip.x - 65}px\">\n        <p class=\"date\">{tooltip.date}</p>\n        <section class=\"info\">\n          {#each tooltip.views as views, i}\n            <div class=\"views\" style=\"color: {colors[i]}\">\n              {Object.keys(yData)[i]}:\n              <span>{views}</span>\n            </div>\n          {/each}\n        </section>\n      </div>\n    {/if}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { round, getCurrencySymbol } from \"../helpers\";\n;\nexport let amount = 0;\nexport let currency;\nexport let withK = false;\n//# sourceMappingURL=money.svelte.js.map</script>\n\n<style>\n  .sum {\n    margin: 0.5rem 0;\n  }\n</style>\n\n<span class=\"sum\">{round(amount, withK)} {getCurrencySymbol(currency)}</span>\n",
    "<script lang=\"ts\">;\nexport let slices;\nconst size = 100;\nconst radCircumference = Math.PI * 2;\nconst center = size / 2;\nconst radius = center - 1;\nfunction renderPaths(slices) {\n    const total = slices.reduce((totalValue, { value }) => totalValue + value, 0);\n    let radSegment = 0;\n    let lastX = radius;\n    let lastY = 0;\n    return slices.map(({ color, value }, index) => {\n        if (value === 0) {\n            return {};\n        }\n        const valuePercentage = value / total;\n        const longArc = valuePercentage <= 0.5 ? 0 : 1;\n        radSegment += valuePercentage * radCircumference;\n        const nextX = Math.cos(radSegment) * radius;\n        const nextY = Math.sin(radSegment) * radius;\n        const d = [\n            `M ${center},${center}`,\n            `l ${lastX},${-lastY}`,\n            `a${radius},${radius}`,\n            \"0\",\n            `${longArc},0`,\n            `${nextX - lastX},${-(nextY - lastY)}`,\n            \"z\",\n        ].join(\" \");\n        lastX = nextX;\n        lastY = nextY;\n        return {\n            d,\n            lastX,\n            lastY,\n            fill: color,\n            key: index,\n        };\n    });\n}\nconst pathes = renderPaths(slices);\n//# sourceMappingURL=pieChart.svelte.js.map</script>\n\n<style>\n  svg {\n    transform: rotate(-90deg);\n    border-radius: 50%;\n    width: 230px;\n    height: 230px;\n  }\n\n  svg path:hover {\n    transform: scale(0.9);\n    top: -5px;\n  }\n</style>\n\n<svg viewBox={`0 0 ${size} ${size}`}>\n  <g transform={`rotate(-90 ${center} ${center})`}>\n    {#each pathes as path}\n      <text x={path.lastX} y={path.lastY} fill=\"#fff\">\n        {slices[path.key].value}\n      </text>\n      <path d={path.d} fill={path.fill} />;\n    {/each}\n  </g>\n</svg>\n",
    "<script>\n  import { savingsHistory } from \"../../store\";\n  import Item from \"./savingHistoryItem.svelte\";\n  import { data } from \"../../data\";\n  import Diagram from \"../diagram.svelte\";\n\n  let yData = []\n  let xData = [];\n\n  $: yData = $savingsHistory.map((item) => item.RUB);\n  $: xData = $savingsHistory.map((item) => item.date);\n</script>\n\n<style>\n  .container {\n    max-height: 468px;\n    overflow-y: auto;\n  }\n</style>\n\n<div class=\"container\">\n  {#each $savingsHistory as item, index}\n    <Item {item} prevItem={$savingsHistory[index - 1]} />\n  {/each}\n</div>\n<!-- <Diagram {xData} {yData} colors={data.colors} title=\"Chart 3\" /> -->\n<!-- <Diagram xData={data.columns[0]} yData={yData}  colors={data.colors} title=\"Chart 3\" /> -->\n\n",
    "<script lang=\"ts\">import { round } from \"../../helpers\";\n;\nimport Money from \"../money.svelte\";\nexport let item;\nexport let prevItem;\nconst prevAmount = prevItem ? prevItem.RUB : 0;\n$: diffAmount = prevItem ? round(item.RUB - prevAmount) : 0;\n//# sourceMappingURL=savingHistoryItem.svelte.js.map</script>\n\n<style>\n  .sum {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0.5rem 1rem;\n    border-bottom: 1px solid #615a5a;\n  }\n  .sum:first-child {\n    border-top: 1px solid #615a5a;\n  }\n  .diff {\n    margin-left: 1rem;\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.25rem;\n  }\n  .green {\n    background-color: rgb(10, 119, 52);\n  }\n  .red {\n    background-color: rgb(209, 13, 23);\n  }\n</style>\n\n<div class=\"sum\">\n  <span>\n    {item.date}:\n\n    <Money amount={item.RUB} currency=\"RUB\" />\n  </span>\n  <span class=\"diff\" class:green={diffAmount >= 0} class:red={diffAmount < 0}>\n    <Money amount={Number(diffAmount)} currency=\"RUB\" withK={true} />\n  </span>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}